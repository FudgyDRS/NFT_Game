//pragma solidity ^0.6.0;

pragma solidity ^0.8.7;

contract tokenNFT {
event Approval(address owner, address approved, uint256 tokenId);
event ApprovalForAll(address owner, address operator, bool, address approved);
event BurnCreature(address _address, uint256 monsterId, uint256 _rewardSize);
event Level(uint256 monsterId, uint256 level);
event Mint(uint256 monsterId, string rarity, uint256 roll);
event MintPowerip(uint256 monsterId, string rarity, uint256 roll);
event NewKing(address _address, uint256 _cost);
event Powerup(uint256 monsterId, uint256 boost);
event Reward(address _address, uint256 _rewardSize);
event RoleAdminChanged(bytes32 role, bytes32 previousAdminRole, bytes32 newAdminRole);
event RoleGranted(bytes32 role, address account, address sender);
event RoleRevoked(bytes32 role, address account, address sender);
event Train(uint256 monsterId, string result, uint256 roll);
event Transfer(address from, address to, uint256 tokenId);
function DEFAULT_ADMIN_ROLE() public view returns(bytes32);
function _feeAddress() public view returns(address);
function _allowed(address) public view returns(bool);
function approve(address to, uint256 tokenId) public nonpayable;
function balanceOf(address owner) public view returns(uint256);
function baseURI() public view returns(string);
function burnAddress() public view returns(address);
function burnCreature(uint256 _id) public nonpayable;
function burnReward() public view returns(uint256);
function buyMine() public payable;
function cooldownBlocks() public view returns(uint256);
function cooledOFF(uint256 _id) public view returns(bool);
function createMonster(address _token, uint256 amount) public nonpayable;
function createPowerup(address _to, address _token, uint256 amount);
function curveValue() public view returns(uint256);
function devFee() public view returns(uint256);
function experienceModifier() public view returns(uint256);
function farmReward() public view returns(uint256);
function farmToken() public view returns(address); // "internalType": "contract IERC20",
function gameOwner() public view returns(address);
function getApproved(uint256 tokenId) public view returns(address);
function getRoleAdmin(bytes32 role) public view returns(bytes32);
function getRoleMember(bytes32 role, bytes32 index) public view returns(address);
function getRoleMemberCount(bytes32 role) public view returns(uint256);
function grantRole(bytes32 role, address account) public nonpayable;
function hasRole(bytes32 role, address account) public view returns(bool);
function isApprovedForAll(address owner, address operator) public view returns(bool);
function minePrice() public view returns(uint256);
function mintCost() public view returns(uint256);
function mintCost2() public view returns(uint256);
function mintMonster(address _to, string _rarity, uint256 _level, uint256 _experience, string _uri, uint256 _boost, uint256 code) public nonpayable;
function mintPowerup(address _to, string _rarity, uint256 _level, uint256 _experience, string _uri, uint256 _boost, uint256 code) public nonpayable;
function monsters(uint256) public view returns(string rarity, uint256 level, uint256 cooldown, uint256 boost, uint256 code);
function monstersOwned(address _address) public view returns(uint256[]);
function multiplier() public view returns(uint256);
function name() public view returns(string);
function ownerOf(uint256 tokenId) public view returns(address);
function powerupsOwned(address _address) public view returns(uint256[]);
function renounceRole(bytes32 role, address account) public nonpayable;
function revokeRole(bytes32 role, address account) public nonpayable;
function safeTransferFrom(address from, address to, uint256 tokenId) public nonpayable;
function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public nonpayable;
function saleActive() public vie returns(bool);
function setAllowed(address token, bool allow) public nonpayable;
function setApprovalForAll(address operator, bool approved) public nonpayable;
function setBaseURI(string baseURI) public nonpayable;
function setBurnReward(uint256 _amount) public nonpayable;
function setCooldown(uint256 _value) public nonpayable;
function setCurveValue(uint256 _value) public nonpayable;
function setExperienceModifier(uint256 _value) public nonpayable;
function setFarmToken(address _address) public nonpayable; // "internalType": "contract IERC20"
function setMintCosts(uint256 _mintCost, uint256 _mintCost2) public  nonpayable;
function setTokenURI(uint256 tokenId, string tokenURI) public nonpayable;
function setFarmReward(uint256 _value) public nonpayable;
function startSale(uint256 _startPrice) public nonpayable;
function supportsInterface(bytes4 interfaceId) public view returns(bool);
function symbol() public view returns(string);
function tokenByIndex(uint256 index) public view returns(uint256);
function tokenOfOwnerByIndex(address owner, uint256 index) public view returns(uint256);
function tokenURI(uint256 tokenId) public view returns(string);
function totalSupply() public view returns(uint256);
function train(uint256 _id) public nonpayable;
function trasferFrom(address from, address to, uint256 tokenId) public nonpayable;
function usePower(uint256 _monsterId, uint256 _powerupId) public nonpayable;
function userMonsters(address, uint256) public view returns(uint256);
function userPowerups(address, uint256) public view returns(uint256);
function withdraw(uint256 amount) public nonpayable;
function withdrawFarmTokens() public nonpayable;

}
